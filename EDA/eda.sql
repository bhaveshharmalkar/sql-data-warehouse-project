-- ============================================
-- 1. DataBase Exploration
-- ============================================

SELECT * FROM INFORMATION_SCHEMA.TABLES

SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_products';


-- ============================================
-- 2. Dimentions Exploration
-- ============================================


-- Explore all countries customer come from
SELECT DISTINCT country FROM gold.dim_customers;

-- Explore product name
SELECT DISTINCT product_name FROM gold.dim_products

-- Explore all categories
SELECT DISTINCT category, subcategory FROM gold.dim_products


-- ============================================
-- 3. Date Exploration
-- ============================================


-- Find the date of the first and last order
SELECT 
	MIN(order_date) AS first_order_date,
	MAX(order_date) AS last_order_date,
	DATEDIFF(YEAR, MIN(order_date), MAX(order_date)) AS order_range_years
FROM 
	gold.fact_sales;

-- Find the youngest and oldest customer
SELECT
	MIN(birth_date) AS oldest_birthdate,
	MAX(birth_date) AS youngest_birthdate,
	DATEDIFF(YEAR, MIN(birth_date), GETDATE()) AS oldest_age,
	DATEDIFF(YEAR, MAX(birth_date), GETDATE()) AS youngest_age
FROM
	gold.dim_customers;


-- ============================================
-- 4. Measure Exploration
-- ============================================

SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_values
	FROM gold.fact_sales
UNION ALL
SELECT 'Total Quantity', SUM(quantity) 
	FROM gold.fact_sales
UNION ALL
SELECT 'Average Price', AVG(price)
	FROM gold.fact_sales
UNION ALL
SELECT 'Total Orders', COUNT(DISTINCT order_number)
	FROM gold.fact_sales
UNION ALL
SELECT 'Total Products', COUNT(DISTINCT product_key)
	FROM gold.dim_products
UNION ALL
SELECT 'Total Customers', COUNT(DISTINCT customer_key)
	FROM gold.dim_customers;



-- ============================================
-- 5. Magnitude Analysis
-- ============================================


-- Find total customers by countres
SELECT
	country,
	COUNT(customer_key) AS total_customers
FROM
	gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC;


-- Find total customers by gender
SELECT
	gender,
	COUNT(customer_key) AS total_customers
FROM
	gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC;


-- Find total products by category
SELECT
	category,
	COUNT(product_key) AS total_products
FROM
	gold.dim_products
GROUP BY category
ORDER BY total_products DESC;


-- What is the average cost in each category?
SELECT
	category,
	AVG(product_cost) AS avg_cost
FROM
	gold.dim_products
GROUP BY category
ORDER BY avg_cost DESC;


-- What is total revenue generated for each category?
SELECT
	dp.category,
	SUM(fs.sales_amount) AS total_revenue
FROM
	gold.fact_sales AS fs
LEFT JOIN
	gold.dim_products AS dp
ON
	dp.product_key = fs.product_key
GROUP BY category
ORDER BY total_revenue DESC; 


-- What is total revenue generated by each customer?x
SELECT
	dc.customer_key,
	dc.first_name,
	dc.last_name,
	SUM(fs.sales_amount) AS total_revenue
FROM
	gold.fact_sales AS fs
LEFT JOIN
	gold.dim_customers AS dc
ON
	dc.customer_key = fs.customer_key
GROUP BY 
	dc.customer_key,
	dc.first_name,
	dc.last_name
ORDER BY total_revenue DESC; 


-- What is a distribution of sold items across counties?
SELECT
	dc.country,
	SUM(fs.quantity) AS items_sold
FROM
	gold.fact_sales AS fs
LEFT JOIN
	gold.dim_customers AS dc
ON
	fs.customer_key = dc.customer_key
GROUP BY country
ORDER BY items_sold DESC;


-- ============================================
-- 6. Ranking Analysis
-- ============================================


-- Which 5 products generate the highest revenue
SELECT * FROM(
SELECT
	ROW_NUMBER() OVER(ORDER BY SUM(fs.sales_amount) DESC) AS ranking,
	dp.product_name,
	SUM(fs.sales_amount) AS total_revenue
FROM
	gold.fact_sales AS fs
LEFT JOIN
	gold.dim_products AS dp
ON
	fs.product_key = dp.product_key
GROUP BY dp.product_name
) t WHERE ranking < 6

-- OR 

SELECT TOP 5
	ROW_NUMBER() OVER(ORDER BY SUM(fs.sales_amount) DESC) AS ranking,
	dp.product_name,
	SUM(fs.sales_amount) AS total_revenue
FROM
	gold.fact_sales AS fs
LEFT JOIN
	gold.dim_products AS dp
ON
	fs.product_key = dp.product_key
GROUP BY dp.product_name
ORDER BY total_revenue DESC;


-- What are 5 worst performing products in terms of sales?
SELECT TOP 5
	ROW_NUMBER() OVER(ORDER BY SUM(fs.sales_amount) DESC) AS ranking,
	dp.product_name,
	SUM(fs.sales_amount) AS total_revenue
FROM
	gold.fact_sales AS fs
LEFT JOIN
	gold.dim_products AS dp
ON
	fs.product_key = dp.product_key
GROUP BY dp.product_name
ORDER BY total_revenue;


-- The 3 customers with the fewest order places
SELECT TOP 3
	dc.customer_key,
	dc.first_name,
	COUNT(fs.order_number) AS order_place
FROM
	gold.fact_sales AS fs
LEFT JOIN
	gold.dim_customers AS dc
ON
	fs.customer_key = dc.customer_key
GROUP BY 
	dc.customer_key,
	dc.first_name
ORDER BY order_place


-- Find the top 10 customers who have generated the highest revenue
SELECT TOP 10
	dc.customer_key,
	dc.first_name,
	dc.last_name,
	SUM(fs.sales_amount) AS revenue
FROM
	gold.fact_sales AS fs
LEFT JOIN
	gold.dim_customers AS dc
ON
	fs.customer_key = dc.customer_key
GROUP BY 
	dc.customer_key,
	dc.first_name,
	dc.last_name
ORDER BY revenue DESC